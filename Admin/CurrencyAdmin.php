<?php
namespace Bordeux\LanguageBundle\Admin;

use Sonata\AdminBundle\Admin\Admin;
use Sonata\AdminBundle\Admin\AdminInterface;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Route\RouteCollection;
use Bordeux\LanguageBundle\Entity\Currency;
use Knp\Menu\ItemInterface as MenuItemInterface;

/**
 * Class CurrencyAdmin
 * @author Krzysztof Bednarczyk
 * @package Bordeux\LanguageBundle\Admin
 */
class CurrencyAdmin extends Admin
{

    protected $classnameLabel = "Currency";

    protected function configureRoutes(RouteCollection $collection)
    {
        $collection->add('refresh', 'refresh');
    }


    // Fields to be shown on create/edit forms
    protected function configureFormFields(FormMapper $formMapper)
    {
        /** @var Currency $subject */
        $subject = $this->getSubject();

        if (!$subject->getId()) {
            $subject->setDecimals(2);
            $subject->setThousandsSeparator(",");
            $subject->setDecimalsSeparator(".");
            $subject->setFormat("%value%");
        }

        $formMapper
            ->add('name')
            ->add('symbol', null, [
                "help" => "ex. USD"
            ])
            ->add('shortSymbol', null, [
                "help" => "ex. $"
            ])
            ->add('format', null, [
                "help" => "ex. %value% Euro"
            ])
            ->add('value', null, [
                "help" => "USD to x"
            ])
            ->add("decimals")
            ->add("decimalsSeparator")
            ->add("thousandsSeparator");


    }

    // Fields to be shown on filter forms
    protected function configureDatagridFilters(DatagridMapper $datagridMapper)
    {
        $datagridMapper
            ->add('name')
            ->add('symbol')
            ->add('shortSymbol')
            ->add('value')
            ->add('lastUpdate');
    }

    // Fields to be shown on lists
    protected function configureListFields(ListMapper $listMapper)
    {
        $listMapper
            ->addIdentifier('name')
            ->addIdentifier('symbol')
            ->addIdentifier('shortSymbol')
            ->addIdentifier('value')
            ->addIdentifier('lastUpdate');
    }


    protected function configureTabMenu(MenuItemInterface $menu, $action, AdminInterface $childAdmin = null)
    {
        $admin = $this->isChild() ? $this->getParent() : $this;
        $id = $admin->getRequest()->get('id');


        !$id && $menu->addChild(
            "Refresh currency values",
            array('uri' => $admin->generateUrl('refresh'))
        );

        parent::configureTabMenu($menu, $action, $childAdmin); // TODO: Change the autogenerated stub
    }

}